{
  "openapi": "3.0.3",
  "info": {
    "title": "APIHUB registry public API",
    "description": "The API contract for APIHUB direct call\n",
    "contact": {
      "url": "https://apihub.domain.com",
      "email": "author@domain.com",
      "name": "Author"
    },
    "license": {
      "name": "Qubership",
      "url": "https://domain.com"
    },
    "version": "0.1.14",
    "x-nc-api-audience": "non-BWC"
  },
  "externalDocs": {
    "description": "Find out more about package",
    "url": "https://wiki.domain.com/display/APIM/API+HUB"
  },
  "servers": [
    {
      "url": "https://{apihub}.domain.com/api/v2",
      "description": "APIHUB server",
      "variables": {
        "apihub": {
          "description": "Name of the APIHUB server.",
          "enum": [
            "apihub",
            "dev.apihub",
            "staging.apihub"
          ],
          "default": "apihub"
        }
      }
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "APIs for auth integrations."
    },
    {
      "name": "Packages",
      "description": "APIs for the package management."
    },
    {
      "name": "Publish",
      "description": "Publish version API"
    },
    {
      "name": "Versions",
      "description": "Published package versions API."
    },
    {
      "name": "Export",
      "description": "Export API documentation."
    },
    {
      "name": "Users",
      "description": "APIs for the user operations."
    },
    {
      "name": "Search",
      "description": "Search functions."
    },
    {
      "name": "Admin",
      "description": "APIs for technical administration."
    },
    {
      "name": "Custom",
      "description": "APIs for custom integrations."
    },
    {
      "name": "Agent",
      "description": "APIHUB Agent API documentation."
    },
    {
      "name": "Integrations",
      "description": "APIs for git integrations."
    },
    {
      "name": "Roles",
      "description": "APIs for role management."
    },
    {
      "name": "Operations",
      "description": "Operations APIs."
    },
    {
      "name": "Documents",
      "description": "Documents APIs."
    },
    {
      "name": "Changes",
      "description": "Changes APIs."
    },
    {
      "name": "TryIt",
      "description": "APIs to test Try It functionality"
    }
  ],
  "paths": {
    "/escaped/{escaped}/text/{text}": {
      "parameters": [
        {
          "name": "escaped",
          "in": "path",
          "description": "Parameter that must contain characters that should be escaped",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "te xt"
        },
        {
          "name": "text",
          "in": "path",
          "description": "Parameter that contains any characters",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "TryIt"
        ],
        "summary": "Endpoint to test TryIt functionality",
        "description": "Endpoint to test TryIt functionality",
        "operationId": "getTryItTest",
        "security": [],
        "parameters": [
          {
            "name": "escaped",
            "in": "query",
            "description": "Parameter that must contain characters that should be escaped",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "te xt"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Parameter that contains any characters",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                    "type": "object",
                    "required": ["pathEscapedUnescaped", "queryEscapedUnescaped", "pathTextUnescaped"],
                    "properties": {
                      "pathEscapedUnescaped": {
                        "description": "Unescaped 'escaped' path parameter",
                        "type": "string"
                      },
                      "queryEscapedUnescaped":{
                        "description": "Unescaped 'escaped' query parameter",
                        "type": "string"
                      },
                      "pathTextUnescaped": {
                        "description": "Unescaped 'text' path parameter",
                        "type": "string"
                      },
                      "queryTextUnescaped":{
                        "description": "Unescaped 'text' query parameter",
                        "type": "string"
                      }
                    }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TryIt"
        ],
        "summary": "Endpoint to test TryIt functionality",
        "description": "Endpoint to test TryIt functionality",
        "operationId": "postTryItTest",
        "security": [],
        "parameters": [],
        "requestBody": {
          "description": "Any text",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required":["text"],
                "properties": {
                  "text": {
                    "description": "Any text",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                    "type": "object",
                    "required": ["pathEscapedUnescaped", "pathTextUnescaped", "bodyText"],
                    "properties": {
                      "pathEscapedUnescaped": {
                        "description": "Unescaped 'escaped' path parameter",
                        "type": "string"
                      },
                      "pathTextUnescaped": {
                        "description": "Unescaped 'text' path parameter",
                        "type": "string"
                      },
                      "bodyText":{
                        "description": "Body 'text' parameter",
                        "type": "string"
                      }
                    }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/Qubership": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Basic auth",
        "description": "Basic authentication.",
        "operationId": "postAuthToken",
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/saml": {
      "post": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Auth"
        ],
        "summary": "SAML authentication",
        "description": "Starts the SAML authentication process in APIHUB.\n\nIn case of successful authentication, the request will be redirected to the **redirectUri** and \nthe response will contain cookie with access token for future API calls.\nAll subsequent APIHUB calls must use this token in a **BearerAuth** authentication.\n",
        "operationId": "postAuthSAML",
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "redirectUri",
            "in": "query",
            "description": "URI, where user must be redirected in case of successful APIHUB authentication.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://apihub.domain.com/portal"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Moved Temporarily",
            "headers": {
              "Set-Cookie": {
                "description": "A base64 encoded userView cookie, containing the user data and access token.",
                "schema": {
                  "type": "string",
                  "example": "userView=eyJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW10cFpDSTZJbk5sWTNKbGRDMXBaQ0lzSW5SNWNDSTZJa3BYVkNKOS5leUpGZUhSbGJuTnBiMjV6SWpwN2ZTd2lSM0p2ZFhCeklqcGJYU3dpU1VRaU9pSmxkbVZzTURJeE9TSXNJazVoYldVaU9pSmxkbVZzTURJeE9TSXNJbUYxWkNJNld5SWlYU3dpWlhod0lqb3hOamMwTURZNU1UVTRMQ0pwWVhRaU9qRTJOelF3TWpVNU5UZ3NJbTVpWmlJNk1UWTNOREF5TlRrMU9Dd2ljM1ZpSWpvaVpYWmxiREF5TVRraWZRLk45d2poeGhLRkoyTlEzNXpCaGw0VEs4VFBOS3RoeDE5czNQQnNheTNkclEiLCJyZW5ld1Rva2VuIjoiZXlKaGJHY2lPaUpJVXpJMU5pSXNJbXRwWkNJNkluTmxZM0psZEMxcFpDSXNJblI1Y0NJNklrcFhWQ0o5LmV5SkZlSFJsYm5OcGIyNXpJanA3ZlN3aVIzSnZkWEJ6SWpwYlhTd2lTVVFpT2lKbGRtVnNNREl4T1NJc0lrNWhiV1VpT2lKbGRtVnNNREl4T1NJc0ltRjFaQ0k2V3lJaVhTd2laWGh3SWpveE5qYzJOakUzT1RVNExDSnBZWFFpT2pFMk56UXdNalU1TlRnc0ltNWlaaUk2TVRZM05EQXlOVGsxT0N3aWMzVmlJam9pWlhabGJEQXlNVGtpZlEuUnRyZEEwNkJrN2lIQnA1bVRYUE1PSnVJdmhtQ0FudHRnVlBqNGZicXN6WSIsInVzZXIiOnsiaWQiOiJldmVsMDIxOSIsImVtYWlsIjoiZXZnZW5paS5lbGl6YXJvdkBuZXRjcmFja2VyLmNvbSIsIm5hbWUiOiJFdmdlbmlpIEVsaXphcm92IiwiYXZhdGFyVXJsIjoiL2FwaS92Mi91c2Vycy9ldmVsMDIxOS9wcm9maWxlL2F2YXRhciJ9fQ==;"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages": {
      "post": {
        "tags": [
          "Packages",
          "Admin"
        ],
        "summary": "Create a new package",
        "description": "Create a new package in APIHUB registry.",
        "operationId": "postPackages",
        "requestBody": {
          "description": "Package for creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageCreate"
              },
              "examples": {}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Package"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "parents": {
                          "description": "List of all parent packages",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PackageList"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Get packages list",
        "description": "Retreive the packages list.",
        "operationId": "getPackages",
        "parameters": [
          {
            "name": "parentId",
            "in": "query",
            "description": "Filter by the parent package Id.",
            "schema": {
              "type": "string",
              "example": "NC.CBSS.CPQ"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Filter the packages by kind.\n\nThe list of values is acceptable. In this case, the following pattern will be used: ```?kind=group,package,dashboard```.\n\nIf not transmitted, the default value will be used.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "workspace",
                  "group",
                  "package",
                  "dashboard"
                ]
              },
              "default": [
                "workspace"
              ],
              "example": [
                "group",
                "package",
                "dashboard"
              ]
            }
          },
          {
            "name": "showAllDescendants",
            "in": "query",
            "description": "Show all the descendants to the parent workspace or group.\n\n* If ```true```, return the list of all child groups/packages/dasboards to the parentId (take into account all other filter parameters).\n* If the parentId is not transmitted???\n* If the parent is transmitted, but kind not - and parentId = package???\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "filter by name/alias/label.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyFavorite",
            "in": "query",
            "description": "filter only favorite packages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "onlyShared",
            "in": "query",
            "description": "filter only shared packages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "versionDetails",
            "in": "query",
            "description": "Show/hide the detailed info about the defaultVersion and it's changes, comparing with the previous one.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "versionLabel",
            "in": "query",
            "description": "Filter the packages by the last published version label.",
            "schema": {
              "type": "string",
              "example": "part-of:CloudBSS-CPQBE"
            }
          },
          {
            "name": "serviceName",
            "description": "Service name that package belongs to. Should be equal to service deployment name in kubernetes.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "quote-tmf-service"
            }
          },
          {
            "$ref": "#/components/parameters/showParents"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Whole packages list with paging.",
                  "type": "object",
                  "properties": {
                    "packages": {
                      "type": "array",
                      "title": "Detailed package",
                      "items": {
                        "required": [
                          "id",
                          "alias",
                          "name"
                        ],
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Package"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "parents": {
                                "description": "List of all parent packages",
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/PackageList"
                                }
                              },
                              "defaultVersion": {
                                "description": "Default release version for the package.\nIt is calculable by the algorithm:\n* If defaultReleaseVersion is filled in on the package explicitly, return it.\n* If not - return the last published version (by date) with \"release\" status.\n* If there were no published release versions, return the last published \"draft\" version (by date).\n* Otherwise - return \"\".\n",
                                "type": "string",
                                "example": "2023.1"
                              },
                              "defaultVersionDetails": {
                                "type": "object",
                                "description": "Details about the defaultVersion and it's changes with previous version.\n* Returns only if the versionDetails:true and the defaultReleaseVersion is explicitly filled in on a package.\n* Otherwise - will be omitted in the answer.\n",
                                "properties": {
                                  "previousVersion": {
                                    "description": "Name of the previous published version.\nIf there is no previous version defined in the publish process, the \"\" value will be returned.\n",
                                    "type": "string",
                                    "example": "2022.4",
                                    "default": ""
                                  },
                                  "status": {
                                    "$ref": "#/components/schemas/VersionStatusEnum"
                                  },
                                  "versionLabels": {
                                    "description": "List of version labels.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "example": [
                                      "part-of:CloudBSS-CPQBE"
                                    ]
                                  },
                                  "summary": {
                                    "$ref": "#/components/schemas/ChangeSummary"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Get package by Id",
        "description": "Common information about the selected package without files and references.",
        "operationId": "getPackagesId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/showParents"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Package"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "parents": {
                          "description": "List of all parent packages",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PackageList"
                          }
                        },
                        "defaultReleaseVersion": {
                          "description": "Default release version for the package.\nOnly `release` version may be placed as default. Return the error otherwise.\n",
                          "type": "string",
                          "example": "2023.1"
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Packages",
          "Admin"
        ],
        "summary": "Change the package's parameters",
        "description": "Change the package's parameters.\n* If the parameter is not transmitted in request - its value stays unchanged.\n* The empty parameter value in request sets the empty value in database. \n",
        "operationId": "patchPackagesId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "requestBody": {
          "description": "Package update parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Package"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "parents": {
                          "description": "List of all parent packages",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PackageList"
                          }
                        },
                        "defaultReleaseVersion": {
                          "description": "Default release version for the package.\nOnly `release` version may be placed as default. Return the error otherwise.\n",
                          "type": "string",
                          "example": "2023.1"
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Packages",
          "Admin"
        ],
        "summary": "Delete package",
        "description": "Delete the package and all included published versions.",
        "operationId": "deletePackagesId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "get": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Packages",
          "Admin"
        ],
        "summary": "Get package status",
        "description": "Get package status.",
        "operationId": "getPackagesIdStatus",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageStatus"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/apiKeys": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Create a package API Key",
        "description": "Create a package API Key.\nThe Api Key for package with kind:group is acceptable for all child groups and packages.\n",
        "operationId": "postPackagesIdApiKeys",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Create API key parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "API key name"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PackageApiKey"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "apiKey": {
                          "description": "Generated ApiKey. It shows only once. Need to copy to your credentials storage.\n",
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Package API Keys list retrieve",
        "description": "Get a package API Keys list.",
        "operationId": "getPackagesIdApiKeys",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apiKeys": {
                      "description": "List of apikeys for package.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageApiKey"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/apiKeys/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "name": "id",
          "description": "Package API key Id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete package API Key",
        "description": "Delete package API Key.",
        "operationId": "deletePackagesIdApiKeysId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/favor": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "post": {
        "tags": [
          "Packages",
          "Users"
        ],
        "summary": "Favor package",
        "description": "Add the package to favorite list for the user. The user is taken from the token info.",
        "operationId": "postPackagesIdFavor",
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/disfavor": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "post": {
        "tags": [
          "Packages",
          "Users"
        ],
        "summary": "Disfavor package",
        "description": "Remove the package from favorite list for the user. The user is taken from the token info.",
        "operationId": "postPackagesIdDisfavor",
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/publish": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "post": {
        "tags": [
          "Publish",
          "Admin"
        ],
        "summary": "Publish package version via upload",
        "description": "Publish package version via upload. Possible options:\n* **Client-side builbing** - client application marks, that the validation and build of the final specification will be ouside the APIHUB backend. \nThe final specifications will be stored using the POST /packages/{packageId}/publish/{publishId}/status API.\nThe 202 response and the publish process Id will be returned in success.\nIn case of the client session close, the build will be continued on the server-sde.\n* **Server-side building** - client application send all raw files-sources and starts the validation and build of the final specification in APIHUB backend.\nThe 202 response and the publish process Id will be returned in success.\n* **No building** - only references publication. Files array in config and sources are empty. In this case the build process won't be started.\nThe 204 response will be returned in success.\n",
        "operationId": "postPackagesIdPublish",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "name": "clientBuild",
            "in": "query",
            "description": "Client-side package build will be used.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "saveSources",
            "in": "query",
            "required": false,
            "description": "Save sources to published version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Publish params",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "config"
                ],
                "properties": {
                  "sources": {
                    "type": "string",
                    "description": "Files for publish in one archive(gz|tgz|zip).\n**Required**, if the files array is filled in config.\n",
                    "format": "binary"
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration of the source files.\nFiles or/and Refs are **required**. \n",
                    "required": [
                      "version",
                      "status"
                    ],
                    "properties": {
                      "version": {
                        "description": "Version name for publication.",
                        "type": "string",
                        "example": "2022.3"
                      },
                      "previousVersion": {
                        "description": "Name of the previous published version.",
                        "type": "string",
                        "example": "2022.2",
                        "default": ""
                      },
                      "previousVersionPackageId": {
                        "description": "Previous release version package id.",
                        "type": "string",
                        "example": "NC.CBSS.CPQ.TMF"
                      },
                      "status": {
                        "description": "Package version status for publish.",
                        "type": "string",
                        "enum": [
                          "draft",
                          "release candidate"
                        ]
                      },
                      "versionLabels": {
                        "description": "List of version labels.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "part-of:CloudBSS-CPQBE"
                        ]
                      },
                      "metadata": {
                        "description": "Common publish metadata.",
                        "type": "object",
                        "properties": {
                          "commitId": {
                            "description": "Last Git commit ID of the version.",
                            "type": "string",
                            "example": "a5d45af7"
                          },
                          "repositoryUrl": {
                            "description": "Url of the Git repository.",
                            "type": "string",
                            "format": "URI",
                            "example": "https://git.domain.com/PROD.Platform.APIHUB/apihub-registry"
                          },
                          "cloudName": {
                            "description": "Name of the cloud for publication from Agent.",
                            "type": "string",
                            "example": "k8s-apps2"
                          },
                          "cloudUrl": {
                            "description": "Full address of the cloud from Agent.",
                            "type": "string",
                            "format": "URI",
                            "example": "https://k8s-apps2.k8s.sdntest.domain.com"
                          },
                          "namespace": {
                            "description": "Namespace of Agent's publication.",
                            "type": "string",
                            "example": "cloudbss-release2"
                          }
                        }
                      },
                      "files": {
                        "description": "Detailed data about files in sources archive.\nRequired if no Refs are provided.\n",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "fileId"
                          ],
                          "properties": {
                            "fileId": {
                              "type": "string",
                              "description": "File name.",
                              "example": "qitmf-v5.11.json"
                            },
                            "publish": {
                              "description": "Flag, publish the source file or not.",
                              "type": "boolean",
                              "default": true
                            },
                            "labels": {
                              "description": "List of file labels.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": [
                                "TMF"
                              ]
                            },
                            "commitId": {
                              "description": "Last Git commit ID of the file.",
                              "type": "string",
                              "example": "a5d45af7"
                            }
                          }
                        }
                      },
                      "refs": {
                        "description": "Detailed data about referenced versions for current package version.\nRequired if no Files are provided.\n",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "refId",
                            "version",
                            "type"
                          ],
                          "properties": {
                            "refId": {
                              "description": "Referenced package Id.",
                              "type": "string",
                              "example": "NC.CloudBSS.CPQ.CORE"
                            },
                            "version": {
                              "description": "Referenced package version number.",
                              "type": "string",
                              "example": "2022.3"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Publish process started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "publishId": {
                      "type": "string",
                      "description": "Publish process Id",
                      "format": "uuid",
                      "example": "9c8e9045-dd9c-4946-b9e4-e05e3f41c4cc"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/publish/{publishId}/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "name": "publishId",
          "description": "Publish Id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "9c8e9045-dd9c-4946-b9e4-e05e3f41c4cc"
          }
        }
      ],
      "post": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Publish",
          "Admin"
        ],
        "summary": "Store publish status",
        "description": "Store publish status and result.",
        "operationId": "postPackagesIdPublishIdStatus",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "requestBody": {
          "description": "Store build result, depending on the process status.\n* **running** - build in progress, data object is not transmitted.\n* **error** - build process will send a the list of errors.\n* **complete** - build process will send a result in a ZIP archive.\n",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "data": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BuildResult"
                      },
                      {
                        "$ref": "#/components/schemas/BuildErrors"
                      }
                    ]
                  },
                  "status": {
                    "description": "Build process result status.",
                    "type": "string",
                    "enum": [
                      "running",
                      "error",
                      "complete"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Publish",
          "Admin"
        ],
        "summary": "Get publish process status",
        "description": "Get publish process status.",
        "operationId": "getPackagesIdPublishIdStatus",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Publish process status.",
                      "type": "string",
                      "enum": [
                        "running",
                        "error",
                        "complete",
                        "none"
                      ]
                    },
                    "message": {
                      "description": "The message for **error** status.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Get package versions list",
        "description": "Get the published package's versions list.",
        "operationId": "getPackagesIdVersions",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by version name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter versions by status (start with match)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "release",
                "release candidate",
                "deprecated",
                "archived"
              ]
            }
          },
          {
            "name": "checkRevisions",
            "in": "query",
            "description": "Flag, if to search in the previous versions revisions. \n* if several revisions were found, return only the maximum found value.\n* if false - return the last published revision.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "versionLabel",
            "in": "query",
            "description": "Filter the package versions by label (any).\n* if the checkRevisions: false - search in the last published revision.\n* if the checkRevisions: true - search in all revisions (backward order). \n",
            "schema": {
              "type": "string",
              "example": "app.kubernetes.io/version:release-2022.4-20230228.094427-171"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Whole package versions list with paging.",
                  "type": "object",
                  "properties": {
                    "versions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageVersion"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Get package version content",
        "description": "Get the published package's version content. Returns all content objects and folders.",
        "operationId": "getPackagesIdVersionsId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "Package version. \nThe mask <version>@<revision> may be used for search in a specific revision.\n",
            "required": true,
            "schema": {
              "type": "string",
              "example": "22.3@3"
            }
          },
          {
            "name": "versionDetails",
            "in": "query",
            "description": "Show/hide the detailed info about last publication and changes.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageVersionContent"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Versions",
          "Admin"
        ],
        "summary": "Update package version",
        "description": "Update package version. \n* If the parameter is not transmitted in request - its value stays unchanged.\n* The empty parameter value in request sets the empty value in database. \n* The array of labels will be fully replaced as-it-send, no JSON-Patch approach for arrays is applicable. \n",
        "operationId": "patchPackagesIdVersionsId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "requestBody": {
          "description": "Version update params",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/VersionStatusEnum"
                  },
                  "versionLabels": {
                    "description": "List of version labels.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "part-of:CloudBSS-CPQBE"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageVersionContent"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Versions",
          "Admin"
        ],
        "summary": "Delete package version",
        "description": "Delete the package's version.\nIf the version was placed as a \"defaultReleaseVersion\" on a package, it will be cleared on this package (without the previous version restore).\n",
        "operationId": "deletePackagesIdVersionsId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/rest/changes": {
      "get": {
        "deprecated": true,
        "x-nc-deprecation-policy": {
          "change-usage-to": "/api/v2/packages/{packageId}/versions/{version}/rest/changes",
          "deprecation-reason": "The operation approach changed the idea of changes. Delete the endpoint in merge."
        },
        "tags": [
          "Changes",
          "Versions"
        ],
        "summary": "Version change log",
        "description": "Get changes between current and previous published package version for REST APIs.",
        "operationId": "getPackagesIdVersionsIdRestChanges",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/packageId"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Package version. \nThe mask <version>@<revision> may be used for search in a specific revision.\n",
            "required": true,
            "schema": {
              "type": "string",
              "example": "22.3@3"
            }
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by title/path/method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "previousVersion": {
                      "description": "Name of the previous published version.",
                      "type": "string",
                      "example": "2022.2"
                    },
                    "previousVersionPackageId": {
                      "description": "Previous release version package id.",
                      "type": "string",
                      "example": "NC.CBSS.CPQ.TMF"
                    },
                    "changes": {
                      "description": "List of discrepancies data of REST operations in a published version.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "path",
                          "method",
                          "jsonPath",
                          "action",
                          "severity"
                        ],
                        "properties": {
                          "operationId": {
                            "description": "Operation unique identifier (slug). Not the same as operationId tag from the OpenAPI file.",
                            "type": "string",
                            "example": "get-quoteManagement-v5-quote"
                          },
                          "title": {
                            "description": "Operation summary/title.",
                            "type": "string"
                          },
                          "path": {
                            "description": "Operation endpoint path.",
                            "type": "string",
                            "example": "/quoteManagement/v5/quote"
                          },
                          "method": {
                            "description": "Operation method",
                            "type": "string",
                            "enum": [
                              "post",
                              "get",
                              "put",
                              "patch",
                              "delete",
                              "head",
                              "options",
                              "connect",
                              "trace"
                            ]
                          },
                          "action": {
                            "type": "string",
                            "description": "Action, that was done with the operation.",
                            "enum": [
                              "add",
                              "remove",
                              "change"
                            ]
                          },
                          "changeSummary": {
                            "$ref": "#/components/schemas/ChangeSummary"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/files/{slug}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/slug"
        }
      ],
      "get": {
        "deprecated": true,
        "x-nc-deprecation-policy": {
          "change-usage-to": "/api/v2/documents/{slug}",
          "deprecation-reason": "The operation approach changed the idea of files."
        },
        "tags": [
          "Versions"
        ],
        "summary": "Get file details",
        "description": "Get the published content object's details by ID.",
        "operationId": "getPackagesIdVersionsIdFilesSlug",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PackageVersionFile"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "openAPI": {
                          "type": "object",
                          "description": "Additional details for OpenAPI document type.",
                          "required": [
                            "title",
                            "version"
                          ],
                          "properties": {
                            "title": {
                              "description": "Document title.",
                              "type": "string",
                              "example": "Quote Integration TMForum Service"
                            },
                            "description": {
                              "description": "Document description.",
                              "type": "string"
                            },
                            "version": {
                              "description": "Document version.",
                              "type": "string",
                              "example": "1.0.1"
                            },
                            "operations": {
                              "description": "List of the operations in file.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "path": {
                                    "description": "Operation endpoint path.",
                                    "type": "string",
                                    "example": "/quoteManagement/v5/quote"
                                  },
                                  "method": {
                                    "description": "Operation method",
                                    "type": "string",
                                    "enum": [
                                      "post",
                                      "get",
                                      "put",
                                      "patch",
                                      "delete",
                                      "head",
                                      "options",
                                      "connect",
                                      "trace"
                                    ]
                                  },
                                  "title": {
                                    "description": "Operation title/description if present.",
                                    "type": "string",
                                    "example": "List Qoute"
                                  },
                                  "tags": {
                                    "description": "List of operation tags.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "example": [
                                      "RestControllerV5"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        },
                        "asyncAPI": {
                          "type": "object",
                          "description": "Additional details for AsyncAPI document type.",
                          "required": [
                            "title",
                            "version"
                          ],
                          "properties": {
                            "title": {
                              "description": "Document title.",
                              "type": "string"
                            },
                            "description": {
                              "description": "Document description.",
                              "type": "string"
                            },
                            "version": {
                              "description": "Document version.",
                              "type": "string",
                              "example": "1.0.1"
                            },
                            "operations": {
                              "description": "List of the operations in file.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "channel": {
                                    "description": "Operation channel.",
                                    "type": "string"
                                  },
                                  "method": {
                                    "description": "Operation method.",
                                    "type": "string",
                                    "enum": [
                                      "publish",
                                      "subscribe"
                                    ]
                                  },
                                  "tags": {
                                    "description": "List of operation tags.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/files/{slug}/raw": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/slug"
        }
      ],
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Get file data (published)",
        "description": "Get the published content object in a RAW format",
        "operationId": "getPackagesIdVersionsIdFilesSlugRaw",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "plain/text": {
                "schema": {
                  "description": "TXT file content (JSON, YAML, MD, TXT).",
                  "type": "string"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "description": "Binary content for unsupported file types (doc, xls, jpg, png, etc.).",
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/files/{slug}/doc": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/slug"
        }
      ],
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export offline API documentation by selected file",
        "description": "Export of offline API documentation by selected file as a zip archive. \nType of the documentation file is provided as input parameters:\n- interactive - html document.\n",
        "operationId": "getPackagesIdVersionsIdFilesSlugDoc",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "name": "docType",
            "in": "query",
            "description": "Type of the exported documentation.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "interactive"
              ],
              "default": "interactive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Documentation ZIP file to download"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  },
                  "VersionNotFound": {
                    "$ref": "#/components/examples/VersionNotFound"
                  },
                  "FileNotFound": {
                    "$ref": "#/components/examples/FileNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/doc": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export offline API documentation by selected versions",
        "description": "Export of offline API documentation by selected version (all files) as a zip archive. \nType of the documentation file is provided as input parameters:\n* interactive - html document.\n",
        "operationId": "getPackagesIdVersionsIdDoc",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "name": "docType",
            "in": "query",
            "description": "Type of the exported documentation.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "interactive"
              ],
              "default": "interactive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Documentation ZIP file to download"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  },
                  "VersionNotFound": {
                    "$ref": "#/components/examples/VersionNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/members": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        }
      ],
      "get": {
        "tags": [
          "Roles",
          "Users"
        ],
        "summary": "Get the package's members list",
        "description": "List of all users and their roles, assigned to the particular package",
        "operationId": "getPackagesIdMembers",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Login of the user",
            "required": false,
            "schema": {
              "type": "string",
              "example": "user1221"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "description": "List of the package's users with roles",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Member"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles",
          "Users"
        ],
        "summary": "Add members to the package",
        "description": "Add new user (one user or multiple users) with a role to the package.\nA member may be added to the package if the assigned role is greater than the existing one.\n",
        "operationId": "postPackagesIdMembers",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "requestBody": {
          "description": "Package members assignment parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "description": "List of the package's users with roles",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Member"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/members/{userId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "Login of the user",
          "schema": {
            "type": "string",
            "example": "user1221"
          }
        }
      ],
      "patch": {
        "tags": [
          "Roles",
          "Users"
        ],
        "summary": "Package member update",
        "description": "Change the member parameters on the package\n",
        "operationId": "patchPackagesIdMembersId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "requestBody": {
          "description": "Package member update parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "description": "Role name",
                    "type": "string",
                    "enum": [
                      "Admin",
                      "Owner",
                      "Release Manager",
                      "Editor",
                      "Viewer"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Roles",
          "Users"
        ],
        "summary": "Package member delete",
        "description": "Delete (unassign) the member from the package. Response variants logic:\n* 200 - if the user has direct role assigned to the current package AND assignment to the parent package, will be returned his inherited role.\n* 204 - if the user has only direct role assigned to the current package, this assignment will be deleted. \n",
        "operationId": "deletePackagesIdMembersId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "member": {
                      "$ref": "#/components/schemas/Member"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sharedFiles": {
      "post": {
        "tags": [
          "Versions"
        ],
        "summary": "Share a published file",
        "description": "Create public link for file that can be used to retrieve the file without security restrictions. The link could be used to embed file content.",
        "operationId": "postSharedFiles",
        "requestBody": {
          "description": "Parameters of package file sharing",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "packageId",
                  "version",
                  "slug"
                ],
                "properties": {
                  "packageId": {
                    "description": "Package unique identifier (full alias)",
                    "type": "string",
                    "example": "NC.CBSS.CPQ.TMF"
                  },
                  "version": {
                    "description": "Package version",
                    "type": "string",
                    "example": "2022.3"
                  },
                  "slug": {
                    "description": "File unique string identifier",
                    "type": "string",
                    "pattern": "^[a-z0-9-]",
                    "example": "qitmf-v5-11-json"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sharedFileId": {
                      "type": "string",
                      "description": "Shared file id",
                      "pattern": "^[a-z0-9]",
                      "example": "ebbcce45"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sharedFiles/{sharedFileId}": {
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Get shared file data",
        "description": "Get shared file data by public shared link",
        "operationId": "getSharedFilesId",
        "security": [
          {}
        ],
        "parameters": [
          {
            "name": "sharedFileId",
            "in": "path",
            "description": "Shared file id",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 8,
              "pattern": "^[a-z0-9]"
            },
            "example": "ebbcce45"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "plain/text": {
                "schema": {
                  "description": "TXT file content (JSON, YAML, MD, TXT).",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/builders/{builderId}/tasks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/builderId"
        }
      ],
      "post": {
        "tags": [
          "Publish",
          "Admin"
        ],
        "summary": "Assign build task to Builder",
        "description": "Returns empty response 204 (in case of no free build task to assign) or multipart form (src+config, matching current start build payload)\n",
        "operationId": "postBuilderIdTasks",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Build task assigned",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "publishId": {
                      "type": "string",
                      "description": "Publish process Id",
                      "example": "9c8e9045-dd9c-4946-b9e4-e05e3f41c4cc"
                    },
                    "saveSources": {
                      "description": "Save sources to published version.",
                      "type": "boolean",
                      "default": false
                    },
                    "sources": {
                      "type": "string",
                      "description": "Files for publish in one archive(gz|tgz|zip).\n**Required**, if the files array is filled in config.\n",
                      "format": "binary"
                    },
                    "config": {
                      "type": "object",
                      "description": "Configuration of the source files.\nFiles or/and Refs are **required**. \n",
                      "required": [
                        "version",
                        "status"
                      ],
                      "properties": {
                        "version": {
                          "description": "Version name for publication.",
                          "type": "string",
                          "example": "2022.3"
                        },
                        "previousVersion": {
                          "description": "Name of the previous published version.",
                          "type": "string",
                          "example": "2022.2",
                          "default": ""
                        },
                        "previousVersionPackageId": {
                          "description": "Previous release version package id.",
                          "type": "string",
                          "example": "NC.CBSS.CPQ.TMF"
                        },
                        "status": {
                          "description": "Package version status for publish.",
                          "type": "string",
                          "enum": [
                            "draft",
                            "release candidate"
                          ]
                        },
                        "versionLabels": {
                          "description": "List of version labels.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "part-of:CloudBSS-CPQBE"
                          ]
                        },
                        "files": {
                          "description": "Detailed data about files in sources archive.\nRequired in no Refs are provided.\n",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "fileId"
                            ],
                            "properties": {
                              "fileId": {
                                "type": "string",
                                "description": "File name.",
                                "example": "qitmf-v5.11.json"
                              },
                              "publish": {
                                "description": "Flag, publish the source file or not.",
                                "type": "boolean",
                                "default": true
                              },
                              "labels": {
                                "description": "List of file labels.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "TMF"
                                ]
                              },
                              "commitId": {
                                "description": "Last Git commit ID of the file.",
                                "type": "string",
                                "example": "a5d45af7"
                              }
                            }
                          }
                        },
                        "refs": {
                          "description": "Detailed data about referenced versions for current package version.\nRequired in no Files are provided.\n",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "refId",
                              "version",
                              "type"
                            ],
                            "properties": {
                              "refId": {
                                "description": "Referenced package Id.",
                                "type": "string",
                                "example": "NC.CloudBSS.CPQ.CORE"
                              },
                              "version": {
                                "description": "Referenced package version number.",
                                "type": "string",
                                "example": "2022.3"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/{searchLevel}": {
      "parameters": [
        {
          "name": "searchLevel",
          "in": "path",
          "required": true,
          "description": "Level of object for search.\n",
          "schema": {
            "type": "string",
            "enum": [
              "operations",
              "documents",
              "packages"
            ]
          }
        }
      ],
      "post": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Search"
        ],
        "summary": "Global search",
        "description": "Global search by text or custom parameteres",
        "operationId": "postSearch",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "requestBody": {
          "description": "Filters for search",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "searchString"
                ],
                "title": "searchCommonParams",
                "description": "Common parameters for Global search",
                "properties": {
                  "searchString": {
                    "description": "Search by common text fields (summary, description, title, etc.).",
                    "type": "string",
                    "example": "Billing account"
                  },
                  "packageIds": {
                    "description": "List of Package Id(s). \n* If user specified Workspace(s), then Workspace Id(s) must be transmitted.\n* If user specified Workspace(s) and Group(s), then Group Id(s) must be transmitted.\n* If user specified Workspace(s), Group(s) and Pakcage(s) or Workspace(s) and Package(s), then Package Id(s) must be trasmitted.\n",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "NC.CloudBSS.CPQ.Q-TMF",
                      "NC.CloudBSS.CPQ.CORE"
                    ]
                  },
                  "versions": {
                    "description": "Package version names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "2022.2",
                      "2022.3"
                    ]
                  },
                  "statuses": {
                    "description": "List of package version statuses",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/VersionStatusEnum"
                    }
                  },
                  "creationDateInterval": {
                    "description": "Search interval for the package version publication date.\nBoth dates are included.\n",
                    "type": "object",
                    "properties": {
                      "startDate": {
                        "description": "Start date of the search.",
                        "type": "string",
                        "format": "date",
                        "default": "1970-01-01"
                      },
                      "endDate": {
                        "description": "End date of the search.",
                        "type": "string",
                        "format": "date",
                        "default": "2050-12-31"
                      }
                    }
                  },
                  "operationParams": {
                    "type": "object",
                    "title": "ApiSpecificParams",
                    "description": "Search parameters specific for particular API type.",
                    "required": [
                      "apiType"
                    ],
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "Search parameters specific for REST API.\nThese params shall be used only if apiType in search request equals to REST API.\n",
                        "title": "SearchRestParams",
                        "properties": {
                          "apiType": {
                            "description": "Type of the API",
                            "type": "string",
                            "enum": [
                              "Rest"
                            ]
                          },
                          "scope": {
                            "description": "Search scope for operation",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "request",
                                "response"
                              ]
                            }
                          },
                          "detailedScope": {
                            "description": "Detailed search scope for operation",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "properties",
                                "annotation",
                                "examples"
                              ]
                            }
                          },
                          "methods": {
                            "description": "Operation method",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "post",
                                "get",
                                "put",
                                "patch",
                                "delete",
                                "head",
                                "options",
                                "connect",
                                "trace"
                              ]
                            },
                            "example": [
                              "post",
                              "get"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Search parameters specific for REST API.\nThese params shall be used only if apiType in search request equals to GraphQL.\n",
                        "title": "SearchGQLParams",
                        "properties": {
                          "apiType": {
                            "description": "Type of the API",
                            "type": "string",
                            "enum": [
                              "GraphQL"
                            ]
                          },
                          "scope": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "query",
                                "mutation",
                                "subscription"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Results of the global search list",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SearchResultOperation"
                      }
                    },
                    "documents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SearchResultDocument"
                      }
                    },
                    "packages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SearchResultPackage"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{gitType}/repositories": {
      "get": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Integrations",
          "Admin"
        ],
        "summary": "Get list of the GIT repositories",
        "description": "Get list of the GIT repositories",
        "operationId": "getGitTypeRepositories",
        "parameters": [
          {
            "name": "textFilter",
            "schema": {
              "type": "string"
            },
            "description": "Filter string or GIT clone URL",
            "in": "query",
            "required": false
          },
          {
            "$ref": "#/components/parameters/gitType"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Repositories list (max 15 items)",
                  "type": "object",
                  "properties": {
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Repository"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{gitType}/repositories/{repositoryId}/branches": {
      "get": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Integrations",
          "Admin"
        ],
        "summary": "Get list of branches",
        "description": "Get list of branches (same logic as GET `/projects/{projectId}/branches')",
        "operationId": "getGitTypeRepositoriesIdBranches",
        "parameters": [
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/repositoryId"
          },
          {
            "$ref": "#/components/parameters/gitType"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Branches list (all)",
                  "type": "object",
                  "properties": {
                    "branches": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GitBranch"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{gitType}/repositories/{repositoryId}/branches/{branch}/files": {
      "get": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Integrations",
          "Admin"
        ],
        "summary": "Get GIT branch files/folders list",
        "description": "Retreive the GIT branch files/folders list",
        "operationId": "getGitTypeRepositoriesIdBranchesIdFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/gitType"
          },
          {
            "$ref": "#/components/parameters/repositoryId"
          },
          {
            "name": "branch",
            "in": "path",
            "description": "Git branch name (URL encoded)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "URLencoded"
            }
          },
          {
            "name": "onlyAddable",
            "in": "query",
            "description": "Filter only addable files",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyFolders",
            "in": "query",
            "description": "Filter only folders",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of content files",
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GitBranchFile"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agents": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get list of all Agent instances",
        "description": "Get a list of clouds on which Agent instances are installed that have registered themselves in APIHUB Registry",
        "operationId": "getAgents",
        "parameters": [
          {
            "name": "onlyActive",
            "in": "query",
            "description": "Defines whether return all Agent instances or only active instances",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of Agent instances",
                  "items": {
                    "type": "object",
                    "properties": {
                      "agentId": {
                        "type": "string",
                        "description": "Id of Agent instance"
                      },
                      "cloud": {
                        "type": "string",
                        "description": "Cloud name where Agent is deployed"
                      },
                      "namesapce": {
                        "type": "string",
                        "description": "Cloud namespace where Agent is deployed"
                      },
                      "url": {
                        "type": "string",
                        "description": "The URL to the Agent"
                      },
                      "lastActive": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the last time when Agent register itself in registry"
                      },
                      "status": {
                        "type": "string",
                        "description": "status of Agent instance"
                      },
                      "backendVersion": {
                        "type": "string",
                        "description": "Backend version of Agent instance"
                      },
                      "frontendVersion": {
                        "type": "string",
                        "description": "Frontend version of Agent instance"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Agent"
        ],
        "summary": "Agent registration",
        "description": "Agent registration in APIHUB registry",
        "operationId": "postAgentRegistration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cloud",
                  "namespace",
                  "url",
                  "backendVersion",
                  "frontendVersion"
                ],
                "properties": {
                  "cloud": {
                    "type": "string",
                    "description": "Cloud name where Agent is deployed"
                  },
                  "namespace": {
                    "type": "string",
                    "description": "Cloud namespace where Agent is deployed"
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL to the Agent"
                  },
                  "backendVersion": {
                    "type": "string",
                    "description": "Backend version of Agent instance"
                  },
                  "frontendVersion": {
                    "type": "string",
                    "description": "Frontend version of Agent instance"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agent/config/clouds/{cloud}/namespaces/{namespace}": {
      "parameters": [
        {
          "name": "cloud",
          "description": "Name of the cloud",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "namespace",
          "description": "Namespace ID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "x-nc-api-audience": "noBWC",
        "summary": "Get agent config",
        "description": "Get agent config",
        "operationId": "getAgentConfigCloudsIdNamespacesId",
        "tags": [
          "Agent",
          "Admin"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "namespace": {
                      "type": "string"
                    },
                    "cloud": {
                      "type": "string"
                    },
                    "config": {
                      "type": "object",
                      "description": "Any object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Agent",
          "Admin"
        ],
        "summary": "Save Agent's config",
        "description": "Save Agent's config",
        "operationId": "postAgentConfigCloudsIdNamespacesId",
        "requestBody": {
          "description": "Agent config params",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Any object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Users",
          "Admin"
        ],
        "summary": "Create internal user",
        "description": "Creation of the internal user, not connected to LDAP or GitLab.\n* If the userId already exists, return an error. \n* One email may be connected to several users at one time, no unique constraint.\n* The password will be stored in a crypted form locally. \n",
        "operationId": "postUsers",
        "security": [
          {}
        ],
        "requestBody": {
          "description": "User for creation",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "Email address of the user",
                    "type": "string",
                    "format": "email",
                    "example": "name.surname@domain.com"
                  },
                  "name": {
                    "description": "Name of the user",
                    "type": "string",
                    "example": "Name Surname"
                  },
                  "password": {
                    "type": "string",
                    "description": "User password.",
                    "format": "password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get users list",
        "description": "List of all users with detailed info",
        "operationId": "getUsers",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by userId (login)/name/email address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "description": "List of all available users",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "delete": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Users",
          "Admin"
        ],
        "summary": "Delete user",
        "description": "Mark the user as deleted in APIHUB, delete the user's membership from packages.\nMark users's personal space as deleted. \n",
        "operationId": "deleteUsersId",
        "parameters": [
          {
            "name": "userId",
            "description": "Login of the user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "user1221"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/profile/avatar": {
      "get": {
        "x-nc-api-audience": "noBWC",
        "tags": [
          "Users",
          "Admin"
        ],
        "summary": "Get the user avatar",
        "description": "Get the user avatar.\nAPI returns the data of photo file in a png format.\n",
        "operationId": "getUsersIdProfileAvatar",
        "security": [
          {}
        ],
        "parameters": [
          {
            "name": "userId",
            "description": "Login of the user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "user1221"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/rest/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Get list of REST operations.",
        "description": "Full list of REST operations without grouping by parent specification document.\n",
        "operationId": "getPackagesIdVersionsIdRestOperations",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/packageId"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by title/path/method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Name of the tag for filtering/grouping.\nA full match is required. To get the list of available tags use GET /tags API.\n",
            "schema": {
              "type": "string",
              "example": "RestControllerV5"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "Name of the label for filtering/grouping.\nA full match is required. To get the list of available tags use GET /labels API.\n",
            "schema": {
              "type": "string",
              "example": "TMF"
            }
          },
          {
            "name": "kind",
            "description": "Operation kind.\n* bwc - API with backward compatibility support (a.k.a. public).\n* no-bwc - API without backward compatibility support (a.k.a. internal).\n* debug - technical API for service maintenance.\n* experimental - APIs for feature testing. Usage is not recommended.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "bwc",
                "no-bwc",
                "debug",
                "experimental"
              ],
              "default": "all"
            }
          },
          {
            "name": "deprecated",
            "description": "Filter operations by 'deprecated' status.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "true",
                "false"
              ],
              "default": "all"
            }
          },
          {
            "name": "includeData",
            "in": "query",
            "description": "Include the operation's content data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "List of the operationId to filter.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "get-quoteManagement-v5-quote",
                "post-quoteManagement-v5-quote"
              ]
            }
          },
          {
            "name": "hashList",
            "in": "query",
            "description": "List of the hash to filter.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "sdfsdfsf242",
                "fhjfjfhjfhj3212"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of operations.",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/RestOperation"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "data": {
                                "description": "Content of the operation as a JSON object.\nRequired, if includeData: true.\n",
                                "type": "object"
                              },
                              "labels": {
                                "description": "List of operation labels.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "TMF"
                                ]
                              },
                              "packageRef": {
                                "$ref": "#/components/schemas/PackageVersionRef"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/rest/operations/{operationId}": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Get REST operation details.",
        "description": "Operation's parameters and data.",
        "operationId": "getPackagesIdVersionsIdRestOperationsId",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/packageId"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/operationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RestOperation"
                    },
                    {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "description": "Content of the operation as a JSON object.",
                          "type": "object"
                        },
                        "labels": {
                          "description": "List of operation labels.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "TMF"
                          ]
                        },
                        "packageRef": {
                          "$ref": "#/components/schemas/PackageVersionRef"
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/rest/operations/{operationId}/changes": {
      "get": {
        "tags": [
          "Changes",
          "Operations"
        ],
        "summary": "Single REST operation change log",
        "description": "Get changes between current and previous published package version in one REST operation.",
        "operationId": "getPackagesIdVersionsRestOperationsIdChanges",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/packageId"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/operationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "changes": {
                      "description": "List of discrepancies data in a REST operation.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Discrepancy data in a single REST operation.",
                        "required": [
                          "changePath",
                          "action",
                          "severity"
                        ],
                        "properties": {
                          "changePath": {
                            "description": "jsonPath to point of change.",
                            "type": "string",
                            "example": "/properties/key"
                          },
                          "description": {
                            "description": "Human-readable description of point of change.",
                            "type": "string",
                            "example": "[ Added ] Property: summary."
                          },
                          "action": {
                            "description": "Action, what was done with the endpoint.",
                            "type": "string",
                            "enum": [
                              "add",
                              "remove",
                              "change"
                            ]
                          },
                          "severity": {
                            "description": "Severity of the particular change.",
                            "type": "string",
                            "enum": [
                              "breaking",
                              "semiBreaking",
                              "nonBreaking",
                              "annotation",
                              "unclassified"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/rest/tags": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Get list of REST operations tags",
        "description": "Get list of REST operations tags in one published version.",
        "operationId": "getPackagesIdVersionsIdRestTags",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/packageId"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by tag.\nPartial name is applicable.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of operations.",
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "TMF"
                      ]
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/rest/labels": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Get list of REST operations labels",
        "description": "Get list of REST operations labels in one published version.",
        "operationId": "getPackagesIdVersionsIdRestLabels",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/packageId"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by label.\nPartial name is applicable.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of operations.",
                  "type": "object",
                  "properties": {
                    "labels": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "RestControllerV5"
                      ]
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "IncorrectInputParams": {
                    "$ref": "#/components/examples/IncorrectInputParameters"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/documents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "tags": [
          "Documents",
          "Versions"
        ],
        "summary": "Get version documents",
        "description": "Get list of documents in a version. The result depend on the package.kind:\n* For package.kind: package - return the list of version documents.\n* For package.kind: dashboard - return the list of all referenced dashboards and their referenced packages in recursion. \n  The returned list will contain only leaves - referenced packages of the lowest level with their published documents.\n",
        "operationId": "getPackagesIdVersionsIdDocuments",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by document title.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of documents in a package.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PackageVersionFile"
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/documents/{slug}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/slug"
        }
      ],
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get document details",
        "description": "Get the published content object's details by ID.",
        "operationId": "getPackagesIdVersionsIdDocumentsSlug",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PackageVersionFile"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "description": {
                          "description": "Document description.",
                          "type": "string"
                        },
                        "operations": {
                          "description": "List of the operations in a file without operation's data.",
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Operation"
                              },
                              {
                                "type": "object",
                                "required": [
                                  "apiType",
                                  "metadata",
                                  "searchScopes"
                                ],
                                "properties": {
                                  "apiType": {
                                    "description": "Type of the API.",
                                    "type": "string",
                                    "enum": [
                                      "Rest",
                                      "Kafka",
                                      "gRPC",
                                      "GraphQL",
                                      "MD",
                                      "Unknown"
                                    ]
                                  },
                                  "metadata": {
                                    "description": "Metadata content depend on apiType.",
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/RestOperationMeta"
                                      },
                                      {
                                        "$ref": "#/components/schemas/KafkaOperationMeta"
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/references": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "tags": [
          "Documents",
          "Versions"
        ],
        "summary": "Get version references",
        "description": "Get list of version referenced packages (lowest level by reqursion, not having refs in a published version).\n",
        "operationId": "getPackagesIdVersionsIdReferences",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter by package name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Filter the packages by kind.",
            "schema": {
              "type": "string",
              "enum": [
                "package",
                "dashboard"
              ],
              "example": "package"
            }
          },
          {
            "name": "showAllDescendants",
            "in": "query",
            "description": "Show all the descendants to the parent workspace or group.\nIf ```true```, return the list of all child packages/dasboards to the current package (take into account all other filter parameters).\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "references": {
                      "description": "List of nested packages from reference.",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/PackageVersionRef"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "parents": {
                                "description": "List of all parent packages",
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/PackageList"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{packageId}/versions/{version}/availableStatuses": {
      "parameters": [
        {
          "$ref": "#/components/parameters/packageId"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Get a list of available statuses that can be set for the version.",
        "description": "Get a list of available statuses that can be set for the version.\nList depends on the current version status and the current user access rights.\n",
        "operationId": "getPackagesIdVersionsIdAvailableStatuses",
        "security": [
          {
            "BearerAuth": []
          },
          {
            "api-key": []
          }
        ],
        "parameters": null,
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "actions": {
                      "description": "List of available actions.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "draft",
                          "release",
                          "release candidate",
                          "deprecated",
                          "archived"
                        ]
                      }
                    }
                  }
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "PackageNotFound": {
                    "$ref": "#/components/examples/PackageNotFound"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "gitType": {
        "name": "gitType",
        "description": "Integration type",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "gitLab"
          ],
          "default": "gitLab"
        }
      },
      "repositoryId": {
        "name": "repositoryId",
        "schema": {
          "type": "string"
        },
        "description": "Repository Id",
        "in": "path",
        "required": true
      },
      "builderId": {
        "name": "builderId",
        "in": "path",
        "description": "Builder unique identifier (UUID)",
        "required": true,
        "schema": {
          "type": "string",
          "format": "UUID",
          "example": "NC.CBSS.CPQ.TMF"
        }
      },
      "packageId": {
        "name": "packageId",
        "in": "path",
        "description": "Package unique identifier (full alias)",
        "required": true,
        "schema": {
          "type": "string",
          "example": "NC.CBSS.CPQ.TMF"
        }
      },
      "version": {
        "name": "version",
        "in": "path",
        "description": "Package version",
        "required": true,
        "schema": {
          "type": "string",
          "example": "2022.3"
        }
      },
      "slug": {
        "name": "slug",
        "in": "path",
        "description": "File unique string identifier",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-z0-9-]",
          "example": "qitmf-v5-11-json"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Requested number of resources to be provided in response.",
        "schema": {
          "type": "number",
          "default": 100,
          "maximum": 100
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Page number",
        "schema": {
          "type": "number",
          "default": 0
        }
      },
      "showParents": {
        "name": "showParents",
        "in": "query",
        "description": "Show/hide the list of parent packages.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "operationId": {
        "name": "operationId",
        "in": "path",
        "description": "Operation unique identifier (slug). Not the same as operationId tag from the OpenAPI file.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "get-quoteManagement-v5-quote"
        }
      }
    },
    "schemas": {
      "AuthResponse": {
        "description": "Auth response",
        "type": "object",
        "properties": {
          "token": {
            "description": "Bearer token",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "token"
        ]
      },
      "PackageCreate": {
        "description": "Parameters for the package creation",
        "required": [
          "alias",
          "name",
          "kind"
        ],
        "type": "object",
        "properties": {
          "parentId": {
            "description": "Parent package ID",
            "type": "string"
          },
          "kind": {
            "description": "Package kind.\n* If kind = workspace, the parentId will be ignored.\n* If kind = group or package or dashboard, the parentId is required.\n",
            "type": "string",
            "enum": [
              "workspace",
              "group",
              "package",
              "dashboard"
            ]
          },
          "name": {
            "description": "Name of the new package",
            "type": "string"
          },
          "alias": {
            "description": "Package short alias (abbreviation)",
            "type": "string",
            "maxLength": 10,
            "pattern": "^[a-zA-Z0-9-_]"
          },
          "description": {
            "description": "Common description of the package",
            "type": "string"
          },
          "serviceName": {
            "description": "Service name that package belongs to. Should be equal to service deployment name in kubernetes.\nIgnored for Workspace and Group kind.\n",
            "type": "string"
          },
          "imageUrl": {
            "type": "string",
            "description": "Path to the package icon",
            "format": "URL"
          },
          "defaultRole": {
            "description": "Default role of the package. Values:\n* Viewer - public package, may be viewed by any user.\n* None - private package, may be viewed only by explicitly specified users.\n",
            "type": "string",
            "enum": [
              "Viewer",
              "None"
            ],
            "default": "Viewer"
          }
        }
      },
      "Package": {
        "description": "Simple package object, without content and dependencies",
        "type": "object",
        "title": "Package",
        "required": [
          "id",
          "alias",
          "kind",
          "name",
          "isFavorite",
          "defaultRole"
        ],
        "properties": {
          "packageId": {
            "description": "Package unique string identifier (full alias)",
            "type": "string"
          },
          "alias": {
            "type": "string",
            "description": "Package short alias (abbreviation)",
            "maxLength": 10,
            "pattern": "^[a-zA-Z0-9-_]"
          },
          "parentId": {
            "description": "Parent package ID",
            "type": "string"
          },
          "kind": {
            "description": "Package kind",
            "type": "string",
            "enum": [
              "workspace",
              "group",
              "package",
              "dashboard"
            ]
          },
          "name": {
            "description": "Name of the package",
            "type": "string"
          },
          "description": {
            "description": "Common description of the package",
            "type": "string"
          },
          "isFavorite": {
            "description": "Sign of the favorite package for the caller user",
            "type": "boolean",
            "default": false
          },
          "serviceName": {
            "description": "Service name that package belongs to. Should be equal to service deployment name in kubernetes.",
            "type": "string"
          },
          "imageUrl": {
            "type": "string",
            "description": "Path to the package icon",
            "format": "URL"
          },
          "userRole": {
            "description": "Role of the user to this particular package.",
            "type": "string",
            "enum": [
              "Admin",
              "Owner",
              "Release Manager",
              "Editor",
              "Viewer"
            ]
          },
          "defaultRole": {
            "description": "Default role of the package. Values:\n* Viewer - public package, may be viewed by any user. \n* None - private package, may be viewed only by explicitly specified users.\n",
            "type": "string",
            "enum": [
              "Viewer",
              "None"
            ]
          }
        }
      },
      "PackageList": {
        "description": "Base package object for parents list.",
        "type": "object",
        "title": "PackageList",
        "properties": {
          "packageId": {
            "description": "Package unique string identifier (full alias)",
            "type": "string"
          },
          "alias": {
            "type": "string",
            "description": "Package short alias (abbreviation)",
            "maxLength": 10,
            "pattern": "^[a-zA-Z0-9-_]"
          },
          "parentId": {
            "description": "Parent package ID",
            "type": "string"
          },
          "kind": {
            "description": "Package kind",
            "type": "string",
            "enum": [
              "workspace",
              "group",
              "package",
              "dashboard"
            ]
          },
          "name": {
            "description": "Name of the package",
            "type": "string"
          },
          "imageUrl": {
            "type": "string",
            "description": "Path to the package icon",
            "format": "URL"
          }
        }
      },
      "PackageUpdate": {
        "description": "Parameters for the package update. Not changed parameters must not be transmitted. Parameters, required in creation, must not be empty if transmitted.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the package",
            "type": "string"
          },
          "description": {
            "description": "Common description of the package",
            "type": "string"
          },
          "serviceName": {
            "description": "Service name that package belongs to. Should be equal to service deployment name in kubernetes.\nParameter may be changed (filled in) only it was empty in creation. Otherwise, the 400 error will be returned.\n",
            "type": "string"
          },
          "imageUrl": {
            "type": "string",
            "description": "Path to the package icon",
            "format": "URL"
          },
          "defaultRole": {
            "description": "Default role of the package. Values:\n* Viewer - public package, may be viewed by any user.\n* None - private package, may be viewed only by explicitly specified users.\n",
            "type": "string",
            "enum": [
              "Viewer",
              "None"
            ]
          },
          "defaultReleaseVersion": {
            "description": "Default release version for the package.\nOnly `release` version may be placed as default. Return the error otherwise.\n",
            "type": "string",
            "example": "2023.1"
          }
        }
      },
      "GitBranch": {
        "description": "External Git branch params",
        "type": "object",
        "properties": {
          "name": {
            "description": "Branch name",
            "type": "string"
          }
        }
      },
      "GitBranchFile": {
        "description": "Git branch file",
        "type": "object",
        "properties": {
          "name": {
            "description": "item name",
            "type": "string"
          },
          "isFolder": {
            "description": "Is item is folder",
            "type": "boolean",
            "default": false
          }
        }
      },
      "Repository": {
        "description": "Linked GIT repository params",
        "type": "object",
        "properties": {
          "repositoryId": {
            "description": "External GIT repository id",
            "type": "string"
          },
          "name": {
            "description": "External GIT repository full name",
            "type": "string"
          },
          "defaultBranch": {
            "description": "Name of the default branch of the linked repository",
            "type": "string"
          }
        }
      },
      "PackageStatus": {
        "description": "Published package version content",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "exist",
              "deleted"
            ]
          }
        }
      },
      "VersionStatusEnum": {
        "description": "Package version status",
        "type": "string",
        "enum": [
          "draft",
          "release",
          "release candidate",
          "deprecated",
          "archived"
        ]
      },
      "User": {
        "description": "APIHUB user",
        "type": "object",
        "required": [
          "id",
          "email"
        ],
        "properties": {
          "id": {
            "description": "Login of the user",
            "type": "string",
            "example": "user1221"
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "Name Surname"
          },
          "email": {
            "description": "Email address of the user",
            "type": "string",
            "format": "email",
            "example": "name.surname@domain.com"
          },
          "avatarUrl": {
            "description": "Avatar of the user",
            "type": "string",
            "format": "URL"
          }
        }
      },
      "Member": {
        "description": "User and assigned role",
        "type": "object",
        "title": "Member",
        "required": [
          "user",
          "role"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "role": {
            "description": "Role name",
            "type": "string",
            "enum": [
              "Admin",
              "Owner",
              "Release Manager",
              "Editor",
              "Viewer"
            ]
          },
          "inheritance": {
            "type": "object",
            "description": "Role was inherited from this package",
            "properties": {
              "packageId": {
                "description": "Package unique string identifier (full alias)",
                "type": "string"
              },
              "kind": {
                "description": "Package kind",
                "type": "string",
                "enum": [
                  "workspace",
                  "group"
                ]
              },
              "name": {
                "description": "Name of the package",
                "type": "string"
              }
            }
          }
        }
      },
      "MemberCreate": {
        "description": "Assign users and role to the package",
        "type": "object",
        "title": "MemberCreate",
        "required": [
          "emails",
          "role"
        ],
        "properties": {
          "emails": {
            "description": "List of email addresses of the users to create.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            },
            "example": [
              "name.surname@domain.com"
            ]
          },
          "role": {
            "description": "Role name for assignment",
            "type": "string",
            "enum": [
              "Admin",
              "Owner",
              "Release Manager",
              "Editor",
              "Viewer"
            ],
            "default": "Editor"
          }
        }
      },
      "PackageVersion": {
        "description": "Base parameters of published version (without content)",
        "type": "object",
        "title": "PackageVersion",
        "required": [
          "version",
          "status",
          "createdAt",
          "createdBy"
        ],
        "properties": {
          "version": {
            "description": "Package version name.",
            "type": "string",
            "example": "2022.3"
          },
          "versionRevision": {
            "description": "Number of the revision.",
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "status": {
            "$ref": "#/components/schemas/VersionStatusEnum"
          },
          "createdBy": {
            "type": "string",
            "description": "User, who created a package.",
            "format": "datetime"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of package creation.",
            "format": "datetime"
          },
          "versionLabels": {
            "description": "List of version labels.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "part-of:CloudBSS-CPQBE"
            ]
          },
          "previousVersion": {
            "description": "previous package version name.",
            "type": "string",
            "example": "2022.2"
          }
        }
      },
      "PackageVersionContent": {
        "description": "Published package version content",
        "type": "object",
        "required": [
          "createdAt",
          "createdBy",
          "summary",
          "revision"
        ],
        "properties": {
          "createdAt": {
            "description": "Date of the package version publication.",
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "description": "User, published the package version.",
            "type": "string"
          },
          "previousVersion": {
            "description": "Name of the previous published version.",
            "type": "string",
            "example": "2022.2"
          },
          "previousVersionPackageId": {
            "description": "Package id of the previous version to compare with. Required for agent snapshots.",
            "type": "string",
            "example": "NC.GRP.SOMEPKG"
          },
          "revision": {
            "description": "Last revision number of published version.",
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "versionLabels": {
            "description": "List of version labels.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "part-of:CloudBSS-CPQBE"
            ]
          },
          "changeSummary": {
            "$ref": "#/components/schemas/ChangeSummary"
          },
          "restOperationSummary": {
            "type": "object",
            "description": "Common info about REST operations in a version.",
            "properties": {
              "endpoints": {
                "description": "Overall number of operations.",
                "type": "integer",
                "default": 0
              },
              "deprecated": {
                "description": "Number of newly deprecated operations (comparing with the previous version).",
                "type": "integer",
                "default": 0
              },
              "created": {
                "description": "Number of newly created operations (comparing with the previous version).",
                "type": "integer",
                "default": 0
              },
              "deleted": {
                "description": "Number of deleted operations (comparing with the previous version).",
                "type": "integer",
                "default": 0
              }
            }
          }
        }
      },
      "PackageVersionFile": {
        "description": "Parameters of published file in package version",
        "type": "object",
        "title": "Package version file",
        "required": [
          "slug",
          "type",
          "format"
        ],
        "properties": {
          "fileId": {
            "type": "string",
            "description": "File name.",
            "example": "qitmf-v5.11.json"
          },
          "slug": {
            "description": "Published file slug",
            "type": "string",
            "pattern": "^[a-z0-9-]",
            "example": "qitmf-v5-11-json"
          },
          "type": {
            "description": "Type of the specification notation.",
            "type": "string",
            "enum": [
              "openapi-3-1",
              "openapi-3-0",
              "openapi-2-0",
              "asyncapi-2",
              "json-schema",
              "markdown",
              "unknown"
            ]
          },
          "format": {
            "description": "Format of the specification document.",
            "type": "string",
            "enum": [
              "json",
              "yaml",
              "md",
              "unknown"
            ]
          },
          "title": {
            "description": "Name/title of the document.",
            "type": "string",
            "example": "Quote Integration TMForum Service"
          },
          "labels": {
            "description": "List of file labels.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TMF"
            ]
          }
        }
      },
      "PackageVersionRef": {
        "description": "Package version reference",
        "type": "object",
        "title": "Referenced package version",
        "required": [
          "refId",
          "name",
          "version",
          "status",
          "type"
        ],
        "properties": {
          "refId": {
            "description": "Referenced package Id",
            "type": "string"
          },
          "kind": {
            "description": "Package kind",
            "type": "string",
            "enum": [
              "package",
              "dashboard"
            ]
          },
          "name": {
            "description": "Name of the referenced package",
            "type": "string"
          },
          "version": {
            "description": "Referenced package version number",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/VersionStatusEnum"
          }
        }
      },
      "SearchResultOperation": {
        "description": "Global search result for API operations; must be returned when searchLevel = operation\n",
        "title": "SearchResultOperation",
        "type": "object",
        "required": [
          "packageId",
          "name",
          "parentPackages",
          "version",
          "status",
          "operationId",
          "title",
          "metadata",
          "apiType"
        ],
        "properties": {
          "packageId": {
            "description": "Package unique string identifier (full alias)",
            "type": "string",
            "example": "NC.CloudBSS.CPQ.Q-TMF"
          },
          "name": {
            "description": "Package name",
            "type": "string",
            "example": "Quote TMF Service"
          },
          "parentPackages": {
            "description": "Array of parent package names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "description": "Package version name",
            "type": "string",
            "example": "2022.2"
          },
          "status": {
            "$ref": "#/components/schemas/VersionStatusEnum"
          },
          "operationId": {
            "description": "Operation unique identifier (slug). Not the same as operationId tag from the OpenAPI file.",
            "type": "string",
            "example": "get-quoteManagement-v5-quote"
          },
          "title": {
            "description": "Operation summary/title.",
            "type": "string"
          },
          "deprecated": {
            "description": "Operation deprecate flag.",
            "type": "boolean",
            "default": false
          },
          "apiType": {
            "type": "string",
            "enum": [
              "Rest",
              "GraphQL"
            ]
          },
          "metadata": {
            "description": "Parameters for specific API type",
            "oneOf": [
              {
                "type": "object",
                "title": "RestParams",
                "description": "Rest API specific parameters",
                "required": [
                  "path",
                  "method"
                ],
                "properties": {
                  "path": {
                    "description": "Operation endpoint path.",
                    "type": "string",
                    "example": "/quoteManagement/v5/quote"
                  },
                  "method": {
                    "description": "Operation method.",
                    "type": "string",
                    "enum": [
                      "post",
                      "get",
                      "put",
                      "patch",
                      "delete",
                      "head",
                      "options",
                      "connect",
                      "trace"
                    ]
                  }
                }
              },
              {
                "type": "object",
                "title": "GraphQLParams",
                "description": "GrapQL specific parameters",
                "required": [
                  "someProperty"
                ],
                "properties": {
                  "someProperty": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "SearchResultPackage": {
        "title": "SearchResultPackage",
        "description": "Global search result for packages with kind = package; must be returned when searchLevel = package\n* If search term matches the package id/name/description/service name, return the latest published version only. \n* If search term matches the version name/label, return that version.\n",
        "type": "object",
        "required": [
          "packageId",
          "name",
          "parentPackages",
          "createdAt",
          "version",
          "revision",
          "status"
        ],
        "properties": {
          "packageId": {
            "description": "Package unique string identifier (full alias)",
            "type": "string",
            "example": "NC.CloudBSS.CPQ.Q-TMF"
          },
          "name": {
            "description": "Package name",
            "type": "string",
            "example": "Quote TMF Service"
          },
          "description": {
            "description": "Package description",
            "type": "string"
          },
          "serviceName": {
            "description": "Service name that package belongs to. Should be equal to service deployment name in kubernetes.",
            "type": "string"
          },
          "parentPackages": {
            "description": "Array of parent package names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "description": "Package version name.",
            "type": "string",
            "example": "2022.2"
          },
          "revision": {
            "description": "Number of the revision. \n",
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "status": {
            "$ref": "#/components/schemas/VersionStatusEnum"
          },
          "createdAt": {
            "description": "Date of the package version publication",
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "description": "List of package version labels",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchResultDocument": {
        "description": "Global search result for documents; must be returned when searchLevel = document",
        "title": "SearchResultDocument",
        "type": "object",
        "required": [
          "packageId",
          "name",
          "parentPackages",
          "version",
          "status",
          "files",
          "slug",
          "type",
          "title"
        ],
        "properties": {
          "packageId": {
            "description": "Package unique string identifier (full alias)",
            "type": "string",
            "example": "NC.CloudBSS.CPQ.Q-TMF"
          },
          "name": {
            "description": "Package name",
            "type": "string",
            "example": "Quote TMF Service"
          },
          "parentPackages": {
            "description": "Array of parent package names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "description": "Package version name.",
            "type": "string",
            "example": "2022.2"
          },
          "status": {
            "$ref": "#/components/schemas/VersionStatusEnum"
          },
          "slug": {
            "description": "Published document slug",
            "type": "string",
            "pattern": "^[a-z0-9-]",
            "example": "qitmf-v5-11-json"
          },
          "type": {
            "description": "Type of the specification notation.",
            "type": "string",
            "enum": [
              "openapi-3-1",
              "openapi-3-0",
              "openapi-2-0",
              "asyncapi-2",
              "json-schema",
              "markdown",
              "unknown"
            ]
          },
          "title": {
            "description": "Name/title of the document.",
            "type": "string",
            "example": "Quote Integration TMForum Service"
          },
          "labels": {
            "description": "List of documents labels.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TMF"
            ]
          },
          "createdAt": {
            "description": "Date of the package version publication",
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string",
            "description": "String with search term occurrences in the document.\nIf document content does not contain search term, then return N first characters.\nIf document is empty, then this property will be empty.\n"
          }
        }
      },
      "ErrorResponse": {
        "description": "An error description",
        "type": "object",
        "properties": {
          "status": {
            "description": "HTTP Status Code",
            "type": "number"
          },
          "code": {
            "description": "Internal string error code. Mandatory in response.",
            "type": "string"
          },
          "message": {
            "description": "The attribute contains an error message.",
            "type": "string"
          },
          "params": {
            "type": "object",
            "description": "Message parameters",
            "example": {
              "id": 12345,
              "type": "string"
            }
          },
          "debug": {
            "description": "The attribute contains debug details (e.g. stack-trace). Presented in the error response only on Dev/Test environments if corresponding logging level is enabled.",
            "type": "string"
          }
        },
        "required": [
          "status",
          "code",
          "message"
        ]
      },
      "PackageApiKey": {
        "type": "object",
        "description": "ApiKey details for the package",
        "title": "PackageApiKey",
        "properties": {
          "id": {
            "description": "ApiKey unique identifier",
            "type": "string",
            "format": "uuid"
          },
          "packageId": {
            "description": "Internal unique package ID (full alias)",
            "type": "string"
          },
          "name": {
            "description": "ApiKey name",
            "type": "string"
          },
          "createdBy": {
            "description": "ApiKey creator user",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time of ApiKey creation",
            "type": "string",
            "format": "datetime"
          }
        }
      },
      "Operation": {
        "description": "Operation object",
        "title": "Operation",
        "type": "object",
        "required": [
          "operationId",
          "operationData",
          "title",
          "dataHash",
          "apiKind",
          "changeSummary"
        ],
        "properties": {
          "operationId": {
            "description": "Operation unique identifier (slug). Not the same as operationId tag from the OpenAPI file.",
            "type": "string",
            "example": "get-quoteManagement-v5-quote"
          },
          "title": {
            "description": "Operation summary/title.",
            "type": "string"
          },
          "dataHash": {
            "description": "Operation hash.",
            "type": "string",
            "example": "sdfsdfsf242"
          },
          "deprecated": {
            "description": "Operation deprecate flag.",
            "type": "boolean",
            "default": false
          },
          "apiKind": {
            "description": "Operation API kind.\n* bwc - API with backward compatibility support (a.k.a. public).\n* no-bwc - API without backward compatibility support (a.k.a. internal).\n* debug - technical API for service maintenance.\n* experimental - APIs for feature testing. Usage is not recommended.\n",
            "type": "string",
            "enum": [
              "bwc",
              "no-bwc",
              "debug",
              "experimental"
            ],
            "default": "bwc"
          }
        }
      },
      "RestOperation": {
        "description": "REST operation object.",
        "title": "RestOperation",
        "allOf": [
          {
            "$ref": "#/components/schemas/Operation"
          },
          {
            "$ref": "#/components/schemas/RestOperationMeta"
          }
        ]
      },
      "RestOperationMeta": {
        "description": "Specific parameters for REST operation.",
        "title": "RestOperationMeta",
        "required": [
          "path",
          "method"
        ],
        "type": "object",
        "properties": {
          "path": {
            "description": "Operation endpoint path.",
            "type": "string",
            "example": "/quoteManagement/v5/quote"
          },
          "method": {
            "description": "Operation method.",
            "type": "string",
            "enum": [
              "post",
              "get",
              "put",
              "patch",
              "delete",
              "head",
              "options",
              "connect",
              "trace"
            ]
          },
          "tags": {
            "description": "List of operation tags.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "RestControllerV5"
            ]
          }
        }
      },
      "KafkaOperationMeta": {
        "description": "Specific parameters for Kafka operation.",
        "title": "KafkaOperationMeta",
        "required": [
          "channel",
          "method"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "description": "Operation channel.",
            "type": "string"
          },
          "method": {
            "description": "Operation method.",
            "type": "string",
            "enum": [
              "publish",
              "subscribe"
            ]
          },
          "tags": {
            "description": "List of operation tags.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BuildResult": {
        "description": "Result of build operation in ZIP archive.\n* The archive contains folders with sources, builded JSON documents and JSON operation files. \n* In addition, several config files are provided. he structure of these files is described below. \n",
        "title": "BuildResult",
        "type": "object",
        "required": [
          "info.json",
          "documents.json",
          "operations.json"
        ],
        "properties": {
          "info.json": {
            "$ref": "#/components/schemas/BuildConfig"
          },
          "documents.json": {
            "type": "object",
            "description": "List of documents data.",
            "properties": {
              "documents": {
                "type": "array",
                "items": {
                  "description": "List of builded files.",
                  "type": "object",
                  "required": [
                    "fileId",
                    "slug",
                    "title"
                  ],
                  "properties": {
                    "fileId": {
                      "type": "string",
                      "description": "File name.",
                      "example": "qitmf-v5.11.json"
                    },
                    "slug": {
                      "description": "Published file slug.",
                      "type": "string",
                      "pattern": "^[a-z0-9-]",
                      "example": "qitmf-v5-11-json"
                    },
                    "type": {
                      "description": "Type of the specification notation.",
                      "type": "string",
                      "enum": [
                        "openapi-3-1",
                        "openapi-3-0",
                        "openapi-2-0",
                        "asyncapi-2",
                        "json-schema",
                        "markdown",
                        "unknown"
                      ]
                    },
                    "format": {
                      "description": "Format of the specification document.",
                      "type": "string",
                      "enum": [
                        "json",
                        "yaml",
                        "md",
                        "unknown"
                      ]
                    },
                    "title": {
                      "description": "Document title and summary.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Document description.",
                      "type": "string"
                    },
                    "operations": {
                      "description": "List of operation IDs.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "get-quoteManagement-v5-quote"
                      ]
                    },
                    "metadata": {
                      "description": "Meta parameters from config file.",
                      "type": "object",
                      "properties": {
                        "labels": {
                          "description": "List of file labels.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "TMF"
                          ]
                        },
                        "commitId": {
                          "description": "Git commit ID of the file.",
                          "type": "string",
                          "example": "a5d84af7"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "changes.json": {
            "type": "object",
            "description": "List of changes data.",
            "properties": {
              "changes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "operationId",
                    "changes",
                    "changesSummary"
                  ],
                  "properties": {
                    "operationId": {
                      "description": "Operation unique identifier (slug). Not the same as operationId tag from the OpenAPI file.",
                      "type": "string",
                      "example": "get-quoteManagement-v5-quote"
                    },
                    "dataHash": {
                      "description": "Operation hash.",
                      "type": "string",
                      "example": "sdfsdfsf242"
                    },
                    "previousDataHash": {
                      "description": "Hash of the previous published version operation.",
                      "type": "string",
                      "example": "sdfsdfsf24dds2"
                    },
                    "changeSummary": {
                      "$ref": "#/components/schemas/ChangeSummary"
                    },
                    "changes": {
                      "description": "Collection of changes depend on apiType.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/RestChange"
                          },
                          {
                            "$ref": "#/components/schemas/KafkaChange"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "operations.json": {
            "description": "List of operations for publish.",
            "type": "object",
            "properties": {
              "operations": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Operation"
                    },
                    {
                      "type": "object",
                      "required": [
                        "data",
                        "apiType",
                        "metadata",
                        "searchScopes"
                      ],
                      "properties": {
                        "apiType": {
                          "description": "Type of the API.",
                          "type": "string",
                          "enum": [
                            "Rest",
                            "Kafka",
                            "gRPC",
                            "GraphQL",
                            "MD",
                            "Unknown"
                          ]
                        },
                        "metadata": {
                          "description": "Metadata content depend on apiType.",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/RestOperationMeta"
                            },
                            {
                              "$ref": "#/components/schemas/KafkaOperationMeta"
                            }
                          ]
                        },
                        "searchScopes": {
                          "description": "Scopes for search indexes.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "example": {
                            "all": "Quote Snapshot V6 Performs full text search ofQuotes Statistics By Phrase fullTextSearchStatistics searchPhrase offset int32 limit int32 fields 200 OK application/json quote anonymousCustomerData assignTo The name of the user/team to whom the Quote is assigned cancellationReason The entity that represents common information about a customer's request cancellationReasonDescription The reason (from the free text field) why the Quote has been cancelled contactMedium A list of contact mediums (ContactMedium [*]). Indicates the contact medium that could be used to contact the party deliveryMethod Id of the Delivery Method (from the Delivery Method list) for Quote description Description of the Quote extendedParameters additionalProperties The attribute contains additional parameters of the Quote The attribute contains additional parameters of the Quote Map<String,List<String>> The attribute contains additional parameters of the Quote externalRefs Represents a reference to an external object id Unique identifier of the Quote name Quote name quoteDate Date and time when the Quote was created date-time quoteTotalPrice Represents Quote total price relatedParty A list of related party references (RelatedPartyRef [*]).A related party defines party or party role linked to a specific entity relatedQuote A list of related quotes (RelatedQuote [*]). It represents another revision of the in-flight Quote from the same chain, i.e. in-flight Quote with the same initialBaselineQuoteId value. This class is returned in the API response only in case of enhancedListQuotes API operation is called. It can be empty if there are no other in-flight Quotes in this chain revision Attribute is used to mark in-flight Quote. Increased in case changes are done to the Quote after submission int32 state State of the Quote updatedWhen Date and time when the Quote was updated date-time validFor Quote with reduced scope of attributes quoteItemStatistic Shows the number of Quote's root Quote Items grouped by some criteria(e.g. by Product Offering, Action) action Numbers of root Quote Items grouped by Action count Number of Quote Items for the specific value int32 name Action name Shows the number of Customer's Product Instances for specified criteria (e.g. Product Family, Billing Account and so on) productFamilyId Unique identifier of Product Family productFamilyName Product family name. Name is returned in the default locale. If alternative locale is passed in Accept-language header in the API request the system returns corresponding localized name in the response. productOfferingId Unique identifier of Product Offering productOfferingName Product offering name. Attribute is returned in the response for catalog entities only (product offering). Name is returned in the default locale. If alternative locale is passed in Accept-language header in the API request the system returns corresponding localized name in the response Shows the number of Quote's root Quote Items grouped by some criteria(e.g. by Product Offering, Action) Shows the Quote with a number of root Quote Items 4XX default response application/json;charset=UTF-8;model=errorResponse;version=1 5XX default response application/json;charset=UTF-8;model=errorResponse;version=1 "
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "RestChange": {
        "type": "object",
        "description": "Discrepancy data for REST operations.",
        "title": "RestChange",
        "required": [
          "path",
          "method",
          "jsonPath",
          "action",
          "severity"
        ],
        "properties": {
          "path": {
            "description": "Operation endpoint path.",
            "type": "string",
            "example": "/quoteManagement/v5/quote"
          },
          "method": {
            "description": "Operation method",
            "type": "string",
            "enum": [
              "post",
              "get",
              "put",
              "patch",
              "delete",
              "head",
              "options",
              "connect",
              "trace"
            ]
          },
          "jsonPath": {
            "description": "Point of changes in a path format.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "paths",
              "/quoteManagement/v5/quote",
              "get",
              "parameters",
              "0",
              "description"
            ]
          },
          "action": {
            "description": "Action, what was done with the endpoint.",
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "test",
              "rename"
            ]
          },
          "severity": {
            "description": "Severity of the particular change.",
            "type": "string",
            "enum": [
              "breaking",
              "semiBreaking",
              "nonBreaking",
              "annotation",
              "unclassified"
            ]
          }
        }
      },
      "KafkaChange": {
        "type": "object",
        "description": "Discrepancy data for Kafka operations.",
        "title": "KafkaChange",
        "required": [
          "channel",
          "method",
          "jsonPath",
          "action",
          "severity"
        ],
        "properties": {
          "channel": {
            "description": "Operation channel.",
            "type": "string"
          },
          "method": {
            "description": "Operation method.",
            "type": "string",
            "enum": [
              "publish",
              "subscribe"
            ]
          },
          "jsonPath": {
            "description": "Point of changes in a path format.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "paths",
              "/quoteManagement/v5/quote",
              "get",
              "parameters",
              "0",
              "description"
            ]
          },
          "action": {
            "description": "Action, what was done with the endpoint.",
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "test",
              "rename"
            ]
          },
          "severity": {
            "description": "Severity of the particular change.",
            "type": "string",
            "enum": [
              "breaking",
              "semiBreaking",
              "nonBreaking",
              "annotation",
              "unclassified"
            ]
          }
        }
      },
      "BuildConfig": {
        "description": "Build configuration, published version details.\n",
        "type": "object",
        "required": [
          "packageId",
          "version"
        ],
        "properties": {
          "packageId": {
            "description": "Package unique string identifier (full alias).",
            "type": "string",
            "example": "NC.CBSS.CPQ.TMF"
          },
          "version": {
            "description": "Version name for publication.",
            "type": "string",
            "example": "2022.3"
          },
          "previousVersion": {
            "description": "Name of the previous published version.",
            "type": "string",
            "example": "2022.2",
            "default": ""
          },
          "previousVersionRevision": {
            "description": "Last revision number of the previous published version.",
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "previousVersionPackageId": {
            "description": "Previous release version package id.",
            "type": "string",
            "example": "NC.CBSS.CPQ.TMF"
          },
          "status": {
            "description": "Package version status for publish.",
            "type": "string",
            "enum": [
              "draft",
              "release candidate"
            ]
          },
          "metadata": {
            "description": "Common publish metadata.",
            "type": "object",
            "properties": {
              "commitId": {
                "description": "Last Git commit ID of the version.",
                "type": "string",
                "example": "a5d45af7"
              },
              "repositoryUrl": {
                "description": "Url of the Git repository.",
                "type": "string",
                "format": "URI",
                "example": "https://git.domain.com/PROD.Platform.APIHUB/apihub-registry"
              },
              "labels": {
                "description": "List of version labels.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "TMF"
                ]
              },
              "cloudName": {
                "description": "Name of the cloud for publication from Agent.",
                "type": "string",
                "example": "k8s-apps2"
              },
              "cloudUrl": {
                "description": "Full address of the cloud from Agent.",
                "type": "string",
                "format": "URI",
                "example": "https://k8s-apps2.k8s.sdntest.domain.com"
              },
              "namespace": {
                "description": "Namespace of Agent's publication.",
                "type": "string",
                "example": "cloudbss-release2"
              }
            }
          },
          "refs": {
            "description": "Detailed data about referenced versions for current package version.\nRequired if no Files are provided.\n",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "refId",
                "version",
                "type"
              ],
              "properties": {
                "refId": {
                  "description": "Referenced package Id.",
                  "type": "string",
                  "example": "NC.CloudBSS.CPQ.CORE"
                },
                "version": {
                  "description": "Referenced package version number.",
                  "type": "string",
                  "example": "2022.3"
                }
              }
            }
          }
        }
      },
      "ChangeSummary": {
        "description": "Numbers of changes between the current and previous published version.\n",
        "type": "object",
        "properties": {
          "breaking": {
            "description": "Number changes, breaking the backward compatibility.",
            "type": "integer",
            "default": 0
          },
          "semiBreaking": {
            "description": "Number of changes, breaking the backward compatibility in a legal way.",
            "type": "integer",
            "default": 0
          },
          "deprecated": {
            "description": "Number of deprecated endpoints.",
            "type": "integer",
            "default": 0
          },
          "nonBreaking": {
            "description": "Number of non-breaking changes.",
            "type": "integer",
            "default": 0
          },
          "annotation": {
            "description": "Number of annotation changes.",
            "type": "integer",
            "default": 0
          },
          "unclassified": {
            "description": "Number of unclassified changes.",
            "type": "integer",
            "default": 0
          }
        }
      },
      "BuildErrors": {
        "description": "Details of the building process errors.\nIf there is an error in a build process, additional 'information' message may be transmitted apart from the 'error' message.\n",
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "severity",
            "message",
            "operationId"
          ],
          "properties": {
            "severity": {
              "description": "Severity of the build problem. Values:\n* 0 - error,\n* 2 - information.\n",
              "type": "integer",
              "enum": [
                0,
                2
              ]
            },
            "message": {
              "description": "Build error message.",
              "type": "string"
            },
            "operationId": {
              "description": "Operation unique identifier (slug). Not the same as operationId tag from the OpenAPI file.",
              "type": "string",
              "example": "get-quoteManagement-v5-quote"
            },
            "fileId": {
              "type": "string",
              "description": "File name.",
              "example": "qitmf-v5.11.json"
            },
            "jsonPath": {
              "description": "Point of changes in a path format.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "paths",
                "/quoteManagement/v5/quote",
                "get",
                "parameters",
                "0",
                "description"
              ]
            }
          }
        }
      }
    },
    "examples": {
      "PackageNotFound": {
        "description": "Package not found by ID. Response for the 404 error",
        "value": {
          "id": "fa574bfb-b8ec-442b-b247-304d4a73d90f",
          "code": "APIHUB-3020",
          "reason": "packageNotFound",
          "message": "package with packageId = $packageId not found",
          "referenceError": "https://wiki.domain.com/display/APIM/APIHUB+Error+codes",
          "status": 404
        }
      },
      "VersionNotFound": {
        "description": "Version not found by number. Response for the 404 error",
        "value": {
          "id": "fa574bfb-b8ec-442b-b247-304d4a73d90f",
          "code": "APIHUB-3050",
          "reason": "PublishedVersionNotFound",
          "message": "Published version $version not found",
          "referenceError": "https://wiki.domain.com/display/APIM/APIHUB+Error+codes",
          "status": 404
        }
      },
      "FileNotFound": {
        "description": "File not found by slug. Response for the 404 error",
        "value": {
          "id": "fa574bfb-b8ec-442b-b247-304d4a73d90f",
          "code": "APIHUB-3043",
          "reason": "FileNotFound",
          "message": "File for path $fileId not found",
          "referenceError": "https://wiki.domain.com/display/APIM/APIHUB+Error+codes",
          "status": 404
        }
      },
      "IncorrectInputParameters": {
        "description": "Incorrect input parameters",
        "value": {
          "id": "fa574bfb-b8ec-442b-b247-304d4a73d90f",
          "code": "APIHUB-COMMON-4001",
          "reason": "Incorrect input parameters",
          "message": "Incorrect input parameters",
          "referenceError": "https://wiki.domain.com/display/APIM/APIHUB+Error+codes",
          "status": 400
        }
      },
      "InternalServerError": {
        "description": "Default internal server error",
        "value": {
          "id": "fa574bfb-b8ec-442b-b247-304d4a73d90f",
          "code": "APIHUB-8000",
          "reason": "InternalServerError",
          "message": "InternalServerError",
          "refwrerenceError": "https://apihub.domain.com/error/APIHUB-COMMON-0001",
          "status": 500
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "description": "Bearer token authentication. Default secutity scheme for API usage.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "api-key": {
        "type": "apiKey",
        "description": "Api-key authentication.",
        "name": "api-key",
        "in": "header"
      },
      "BasicAuth": {
        "type": "http",
        "description": "Login/password authentication.",
        "scheme": "basic"
      }
    }
  }
}